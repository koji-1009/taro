// Mocks generated by Mockito 5.4.4 from annotations
// in taro/test/taro_loader_network_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:taro/src/network/http_client.dart' as _i2;
import 'package:taro/src/taro_resizer.dart' as _i5;
import 'package:taro/src/taro_type.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  @override
  Duration get timeout => (super.noSuchMethod(
        Invocation.getter(#timeout),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#timeout),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#timeout),
        ),
      ) as Duration);

  @override
  _i3.Future<
      ({
        _i4.Uint8List bodyBytes,
        int? contentLength,
        Map<String, String> headers,
        bool isRedirect,
        String? reasonPhrase,
        int statusCode
      })> get({
    required Uri? uri,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #uri: uri,
            #headers: headers,
          },
        ),
        returnValue: _i3.Future<
            ({
              _i4.Uint8List bodyBytes,
              int? contentLength,
              Map<String, String> headers,
              bool isRedirect,
              String? reasonPhrase,
              int statusCode
            })>.value((
          bodyBytes: _i4.Uint8List(0),
          contentLength: null,
          headers: <String, String>{},
          isRedirect: false,
          reasonPhrase: null,
          statusCode: 0
        )),
        returnValueForMissingStub: _i3.Future<
            ({
              _i4.Uint8List bodyBytes,
              int? contentLength,
              Map<String, String> headers,
              bool isRedirect,
              String? reasonPhrase,
              int statusCode
            })>.value((
          bodyBytes: _i4.Uint8List(0),
          contentLength: null,
          headers: <String, String>{},
          isRedirect: false,
          reasonPhrase: null,
          statusCode: 0
        )),
      ) as _i3.Future<
          ({
            _i4.Uint8List bodyBytes,
            int? contentLength,
            Map<String, String> headers,
            bool isRedirect,
            String? reasonPhrase,
            int statusCode
          })>);
}

/// A class which mocks [TaroResizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaroResizer extends _i1.Mock implements _i5.TaroResizer {
  @override
  _i3.Future<({_i4.Uint8List bytes, String contentType})> resizeIfNeeded({
    required _i4.Uint8List? bytes,
    required String? contentType,
    required ({
      int? maxHeight,
      int? maxWidth,
      _i6.TaroResizeMode mode
    })? resizeOption,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resizeIfNeeded,
          [],
          {
            #bytes: bytes,
            #contentType: contentType,
            #resizeOption: resizeOption,
          },
        ),
        returnValue:
            _i3.Future<({_i4.Uint8List bytes, String contentType})>.value((
          bytes: _i4.Uint8List(0),
          contentType: _i7.dummyValue<String>(
            this,
            Invocation.method(
              #resizeIfNeeded,
              [],
              {
                #bytes: bytes,
                #contentType: contentType,
                #resizeOption: resizeOption,
              },
            ),
          )
        )),
        returnValueForMissingStub:
            _i3.Future<({_i4.Uint8List bytes, String contentType})>.value((
          bytes: _i4.Uint8List(0),
          contentType: _i7.dummyValue<String>(
            this,
            Invocation.method(
              #resizeIfNeeded,
              [],
              {
                #bytes: bytes,
                #contentType: contentType,
                #resizeOption: resizeOption,
              },
            ),
          )
        )),
      ) as _i3.Future<({_i4.Uint8List bytes, String contentType})>);
}
